---
title: "Deep Learning Development: Setup FastAI on MacOS"
subtitle: "In this guide I share my experience setting up fastai on MacOS (with Apple silicon) and show you how to get started quickly."
author: "David Ajowi"
date: "2024-07-28"
categories: [deep learning, fastai, guides]
---

My deep learning journey accelerated when my friend ([Martin Chiteri](http://geek.co.ke)) pointed me to the famous *Practical Deep Learning for Coders* course from Fast.ai - a free online course that will teach you how to apply practical deep learning and machine learning to train fast and accurate neural nerworks. The course is based on an equally great book *Deep Learning for Coders with fastai and PyTorch* (also freely available online).

```fastai``` is a machine learning library built on top of PyTorch that provides a consitent interface to the most frequently used deep learning applications. It is extensively documented - see [Resources](##Resources) section for links to important material.

In this guide, I share my experience setting up ```fastai``` on MacOS (with Apple silicon) and show you how to get started with development quickly.

> You can install fastai on your own machines with conda (highly recommended), as long as you’re running Linux or Windows (NB: Mac is not supported). - [FastAI Docs](https://docs.fast.ai)

Installation of ```fastai``` on MacOS is not supported. The good news, you can use ```fastai``` without installing it in your local machine - this is possible on [Google Colab](https://colab.google) or [Kaggle](https://kaggle.com) platforms. 

Often, I want to be able to work on projects locally. A good option is to use docker containers. I opted to setup a container enviroment.

## Setting up a docker container

> Docker helps developers build, share, run, and verify applications anywhere — without tedious environment configuration or management.

In a terminal, I downloaded and installed Docker Desktop for Mac(with Apple silicon) in the **Applications** folder.


:::{.callout-note}
Beginning version 4.3.0, Docker removed the hard requirement to install Rosetta 2 (but still recommend it to get the best experience).
:::


```zsh
% wget https://desktop.docker.com/mac/main/arm64/Docker.dmg
% softwareupdate --install-rosetta
% sudo hdiutil attach Docker.dmg
% sudo /Volumes/Docker/Docker.app/Contents/MacOS/install --accept-license --user=<username>
% sudo hdiutil detach /Volumes/Docker
```

Next, grabbed the latest ubuntu image from Docker Hub.

```zsh
% docker pull ubuntu
```

Created and launched a new container in interactive mode. 

```zsh
% sudo docker run -it —name fastai-deep-learning ubuntu /bin/bash
```

I now have access to an interactive shell inside the container. Rest of the commands in this and the next [section](##install-fastai) are executed inside the container.

Update `apt` and install necessary utility packages

```zsh
% apt update && apt install wget unzip apt-utils
```

The ubuntu ARM64 (M1) base image downloaded and used above (unless a different --platform is specified in a build call if you decide to build a fresh image) does not come pre-populated with x86 shared objects. I had to install these and link them appropriately. Otherwise, I kept getting this error message: ``qemu-x86_64: Could not open '/lib64/ld-linux-x86-64.so.2': No such file or directory``.

```zsh
% apt install -y libc6-amd64-cross libstdc++6-amd64-cross
% ln -s /usr/x86_64-linux-gnu/lib/*.so.* /lib
% ln -s /usr/x86_64-linux-gnu/lib64/ /lib64
```

## Installing `fastai`

Following the fastai docs, I downloaded and installed `miniconda`.

```zsh
% mkdir -p ~/miniconda3
% wget https://repo.anaconda.com/miniconda/Miniconda3-latest-Linux-x86_64.sh -O ~/miniconda3/miniconda.sh
% bash ~/miniconda3/miniconda.sh -b -u -p ~/miniconda3
% rm -rf ~/miniconda3/miniconda.sh
```

Install `pip`.

```zsh
% sudo apt install python3-pip
```

Install `pytorch`.

```zsh
% conda install pytorch torchvision torchaudio cpuonly -c pytorch
```

Finally, install fastai.

```zsh
% conda install -c fastai fastai
```

## Create a new docker image

`docker ps -a` lists all containers. I located my container (*fastai-deep-learning* created [above](##Setting-Up-A-Docker-Container)) and copied the container ID. Saved the container's configuration and setup to a new image *fastai-dl* using docker's `container commit`. I finally confirmed my newly created image exists using `docker images`. 

*fastai-dl* image can now be used to create a new ready-to-use container for fastai development on MacOS.

```zsh
% docker ps -a
% docker container commit -p CONTAINER_ID fastai-dl
% docker images
```

## Start developing - Using JupyterLab inside a docker container

>JupyterLab is the latest web-based interactive development environment for notebooks, code, and data.

I use Jupyter notebooks for most of my deep learning development work. My local project notebooks should be accessible inside the docker enviroment and loaded by Jupyter. 

To achieve this, I launched a new docker container (with an interactive shell) attaching my local project folder as a volume using `-v ~/Dev/deep-learning:/data` (local folder `~/Dev/deep-learning` syncs to `/data` folder in the container). I mapped ports using `-p 8889:8888` (local port `8889` maps to the container's jupyter instance running on port `8888`).

```zsh
% docker run -it -p 8889:8888 -v ~/Dev/deep-learning:/data --name CONTAINER_NAME fastai-dl /bin/bash
```

Once inside the container I launched jupyter using the following command:

```zsh
% jupyter notebook --ip 0.0.0.0 --no-browser
```

Voila! I could access jupyter locally at `https://localhost:8889`.


![](jupyter.png)


You can [access and download a ready-to-use docker image](https://hub.docker.com/r/daajowi/fastai-dl) to kickstart your fastai development on MacOS, or setup a clean environment by following this guide. 

Happy building!

## Resources
1. [fastai Docker Image for MacOS](https://hub.docker.com/r/daajowi/fastai-dl)
2. [Course: Practical Deep Learning for Coders](https://course.fast.ai)
3. [Book: Deep Learning for Coders with fastai and PyTorch](https://course.fast.ai)
4. [fastai Docs](https://docs.fast.ai)
5. [Docker Docs](https://docs.docker.com/manuals)
6. [Jupyter Lab Docs](https://jupyter.org)
7. [PyTorch Website](https://pytorch.org)