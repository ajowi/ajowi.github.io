[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Latest Entries",
    "section": "",
    "text": "Deep Learning Development: Setting up FastAI on MacOS\n\n\nIn this guide I share my experience setting up fastai on MacOS and show you how to get started quickly.\n\n\n\ndeep learning\n\n\nfastai\n\n\n\n\n\n\n\n\n\nJul 28, 2024\n\n\nDavid Ajowi\n\n\n\n\n\n\nNo matching items"
  },
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "About",
    "section": "",
    "text": "About this blog"
  },
  {
    "objectID": "posts/installing-fastai-on-macos/index.html",
    "href": "posts/installing-fastai-on-macos/index.html",
    "title": "Deep Learning Development: Setting up FastAI on MacOS",
    "section": "",
    "text": "My deep learning journey accelerated when my friend and a former comrade (thank you, Martin Chiteri) pointed me to the famous Practical Deep Learning for Coders course from Fast.ai - a free online course that will teach you how to apply practical deep learning and machine learning to train fast and accurate neural nerworks. The course is based on an equally great book Deep Learning for Coders with fastai and PyTorch(also freely available online).\nfastai is a machine learning library built on top of PyTorch that provides a consitent interface to the most frequently used deep learning applications. It is extensively documented - see Resources for links to important materials.\nIn the following sections, I share my experience setting up fastai on MacOS (with Apple silicon) and show you how to get started with development quickly.\nInstallation of fastai on MacOS is not supported as evidenced by the above statement from the fastai docs website. The good news, we can use fastai without installation by using Google Colab or Kaggle.\nOften, I want to be able to work on projects locally. A good option is to use docker containers (see Resources for official docker containers for the project). And so I opted to setup a container enviroment for my scenario."
  },
  {
    "objectID": "posts/installing-fastai-on-macos/index.html#setting-up-a-docker-container",
    "href": "posts/installing-fastai-on-macos/index.html#setting-up-a-docker-container",
    "title": "Deep Learning Development: Setting up FastAI on MacOS",
    "section": "Setting up a docker container",
    "text": "Setting up a docker container\n\nDocker helps developers build, share, run, and verify applications anywhere — without tedious environment configuration or management.\n\nOpen up a terminal and run the following commands to download and install Docker Desktop for Mac(with Apple silicon) in the Applications folder. Beginning version 4.3.0 Docker removed the hard requirement to install Rosetta 2 (but still recommend it to get the best experience).\n% wget https://desktop.docker.com/mac/main/arm64/Docker.dmg\n% softwareupdate --install-rosetta\n% sudo hdiutil attach Docker.dmg\n% sudo /Volumes/Docker/Docker.app/Contents/MacOS/install --accept-license --user=&lt;username&gt;\n% sudo hdiutil detach /Volumes/Docker\nNext, grab the latest ubuntu image from Docker Hub.\n% docker pull ubuntu\nCreate and start a new container in interactive mode. Replace fastai-deep-learning with your choice of container name.\n% sudo docker run -it —name fastai-deep-learning ubuntu /bin/bash\nUpdate apt and install necessary packages\n% apt update && apt install wget unzip apt-utils\nThe ubuntu ARM64 (M1) base image we downloaded and used above (unless you specify a different –platform in your build call if you decide to build a fresh image) does not come pre-populated with x86 shared objects. I had to install these and link them appropriately. Otherwise, I kept encountering this error message : qemu-x86_64: Could not open '/lib64/ld-linux-x86-64.so.2': No such file or directory.\n% apt install -y libc6-amd64-cross libstdc++6-amd64-cross\n% ln -s /usr/x86_64-linux-gnu/lib/*.so.* /lib\n% ln -s /usr/x86_64-linux-gnu/lib64/ /lib64\nUpdate apt and install necessary packages.\n% apt update && apt install wget unzip apt-utils"
  },
  {
    "objectID": "posts/installing-fastai-on-macos/index.html#install-fastai",
    "href": "posts/installing-fastai-on-macos/index.html#install-fastai",
    "title": "Deep Learning Development: Setting up FastAI on MacOS",
    "section": "Install fastai",
    "text": "Install fastai\nFirst, download and install miniconda.\n% mkdir -p ~/miniconda3\n% wget https://repo.anaconda.com/miniconda/Miniconda3-latest-Linux-x86_64.sh -O ~/miniconda3/miniconda.sh\n% bash ~/miniconda3/miniconda.sh -b -u -p ~/miniconda3\n% rm -rf ~/miniconda3/miniconda.sh\nInstall pip.\n% sudo apt install python3-pip\nInstall pytorch.\n% conda install pytorch torchvision torchaudio cpuonly -c pytorch\nFinally, install fastai.\n% conda install -c fastai fastai\nI saved the docker container configuration and setup to a new image fast_dl using docker’s commit command below. ps lists all containers, I then copied the ID (replace CONTAINER_ID with this) of my container fastai-deep-learning (this is the container we created above). Then confirmed my newly created image exists using docker images.\n% docker ps -a\n% docker container commit -p CONTAINER_ID fastai-dl\n% docker images"
  },
  {
    "objectID": "posts/installing-fastai-on-macos/index.html#using-jupyterlab-on-our-docker-container",
    "href": "posts/installing-fastai-on-macos/index.html#using-jupyterlab-on-our-docker-container",
    "title": "Deep Learning Development: Setting up FastAI on MacOS",
    "section": "Using JupyterLab on our docker container",
    "text": "Using JupyterLab on our docker container\n\nJupyterLab is the latest web-based interactive development environment for notebooks, code, and data.\n\nI use Jupyter notebooks for most of my deep learning development work. My local project notebooks should be accessible inside the docker enviroment and loaded by jupyter. To achieve this: spin up a new docker container (replace CONTAINER_NAME below), attaching the local project folder (-v ~/Dev/deep-learning:/data in my scenario) as a volume to the container, and mapping jupyter ports (-p 8889:8888 in my sceario) to allow access to the container’s jupyter instance. Local directory ~/Dev/deep-learning will be synced to /data folder on the container while Local port 8889 will be mapped to the container’s jupyter port 8888.\n% docker run -it -p 8889:8888 -v ~/Dev/deep-learning:/data --name CONTAINER_NAME fastai-dl /bin/bash\nThe command above launches a container with an interactive shell. Launch jupyter using the following command.\n% jupyter notebook --ip 0.0.0.0 --no-browser\nVoila! Jupyter can now be accessed locally at https://localhost:8889.\n\nNow, go build your deep learning models. Happy building!"
  },
  {
    "objectID": "posts/installing-fastai-on-macos/index.html#resources",
    "href": "posts/installing-fastai-on-macos/index.html#resources",
    "title": "Deep Learning Development: Setting up FastAI on MacOS",
    "section": "Resources",
    "text": "Resources\n\nDocker image ready for use in MacOS\nCourse: Practical Deep Learning for Coders\nBook: Deep Learning for Coders with fastai and PyTorch\nfastai Docs\nDocker Docs\nJupyter Lab Docs\nPyTorch Website"
  }
]