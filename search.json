[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Latest Entries",
    "section": "",
    "text": "Deep Learning Development: Setup FastAI on MacOS\n\n\nIn this guide I share my experience setting up fastai on MacOS (with Apple silicon) and show you how to get started quickly.\n\n\n\ndeep learning\n\n\nfastai\n\n\nguides\n\n\n\n\n\n\n\n\n\nJul 28, 2024\n\n\nDavid Ajowi\n\n\n\n\n\n\nNo matching items"
  },
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "About",
    "section": "",
    "text": "About this blog"
  },
  {
    "objectID": "posts/installing-fastai-on-macos/index.html",
    "href": "posts/installing-fastai-on-macos/index.html",
    "title": "Deep Learning Development: Setup FastAI on MacOS",
    "section": "",
    "text": "My deep learning journey accelerated when my friend and a former comrade (thank you, Martin Chiteri) pointed me to the famous Practical Deep Learning for Coders course from Fast.ai - a free online course that will teach you how to apply practical deep learning and machine learning to train fast and accurate neural nerworks. The course is based on an equally great book Deep Learning for Coders with fastai and PyTorch (also freely available online).\nfastai is a machine learning library built on top of PyTorch that provides a consitent interface to the most frequently used deep learning applications. It is extensively documented - see Resources section for links to important material.\nIn this guide, I share my experience setting up fastai on MacOS (with Apple silicon) and show you how to get started with development quickly.\nInstallation of fastai on MacOS is not supported. The good news, you can use fastai without installing it in your local machine - this is possible on Google Colab or Kaggle platforms.\nOften, I want to be able to work on projects locally. A good option is to use docker containers. I opted to setup a container enviroment."
  },
  {
    "objectID": "posts/installing-fastai-on-macos/index.html#setting-up-a-docker-container",
    "href": "posts/installing-fastai-on-macos/index.html#setting-up-a-docker-container",
    "title": "Deep Learning Development: Setup FastAI on MacOS",
    "section": "Setting up a docker container",
    "text": "Setting up a docker container\n\nDocker helps developers build, share, run, and verify applications anywhere — without tedious environment configuration or management.\n\nIn a terminal, I downloaded and installed Docker Desktop for Mac(with Apple silicon) in the Applications folder. :::{.callout-note} Beginning version 4.3.0, Docker removed the hard requirement to install Rosetta 2 (but still recommend it to get the best experience). :::\n% wget https://desktop.docker.com/mac/main/arm64/Docker.dmg\n% softwareupdate --install-rosetta\n% sudo hdiutil attach Docker.dmg\n% sudo /Volumes/Docker/Docker.app/Contents/MacOS/install --accept-license --user=&lt;username&gt;\n% sudo hdiutil detach /Volumes/Docker\nNext, grabbed the latest ubuntu image from Docker Hub.\n% docker pull ubuntu\nCreated and launched a new container in interactive mode.\n% sudo docker run -it —name fastai-deep-learning ubuntu /bin/bash\nI now have access to an interactive shell inside the container. Rest of the commands in this and the next section are executed inside the container.\nUpdate apt and install necessary utility packages\n% apt update && apt install wget unzip apt-utils\nThe ubuntu ARM64 (M1) base image downloaded and used above (unless a different –platform is specified in a build call if you decide to build a fresh image) does not come pre-populated with x86 shared objects. I had to install these and link them appropriately. Otherwise, I kept getting this error message: qemu-x86_64: Could not open '/lib64/ld-linux-x86-64.so.2': No such file or directory.\n% apt install -y libc6-amd64-cross libstdc++6-amd64-cross\n% ln -s /usr/x86_64-linux-gnu/lib/*.so.* /lib\n% ln -s /usr/x86_64-linux-gnu/lib64/ /lib64"
  },
  {
    "objectID": "posts/installing-fastai-on-macos/index.html#installing-fastai",
    "href": "posts/installing-fastai-on-macos/index.html#installing-fastai",
    "title": "Deep Learning Development: Setup FastAI on MacOS",
    "section": "Installing fastai",
    "text": "Installing fastai\nFollowing the fastai docs, I downloaded and installed miniconda.\n% mkdir -p ~/miniconda3\n% wget https://repo.anaconda.com/miniconda/Miniconda3-latest-Linux-x86_64.sh -O ~/miniconda3/miniconda.sh\n% bash ~/miniconda3/miniconda.sh -b -u -p ~/miniconda3\n% rm -rf ~/miniconda3/miniconda.sh\nInstall pip.\n% sudo apt install python3-pip\nInstall pytorch.\n% conda install pytorch torchvision torchaudio cpuonly -c pytorch\nFinally, install fastai.\n% conda install -c fastai fastai"
  },
  {
    "objectID": "posts/installing-fastai-on-macos/index.html#create-a-new-docker-image",
    "href": "posts/installing-fastai-on-macos/index.html#create-a-new-docker-image",
    "title": "Deep Learning Development: Setup FastAI on MacOS",
    "section": "Create a new docker image",
    "text": "Create a new docker image\ndocker ps -a lists all containers. I located my container (fastai-deep-learning created above) and copied the container ID. Saved the container’s configuration and setup to a new image fastai-dl using docker’s container commit. I finally confirmed my newly created image exists using docker images.\nfastai-dl image can be used for spinning a new ready-to-use container for fastai development on MacOS.\n% docker ps -a\n% docker container commit -p CONTAINER_ID fastai-dl\n% docker images"
  },
  {
    "objectID": "posts/installing-fastai-on-macos/index.html#start-developing---using-jupyterlab-inside-a-docker-container",
    "href": "posts/installing-fastai-on-macos/index.html#start-developing---using-jupyterlab-inside-a-docker-container",
    "title": "Deep Learning Development: Setup FastAI on MacOS",
    "section": "Start developing - Using JupyterLab inside a docker container",
    "text": "Start developing - Using JupyterLab inside a docker container\n\nJupyterLab is the latest web-based interactive development environment for notebooks, code, and data.\n\nI use Jupyter notebooks for most of my deep learning development work. My local project notebooks should be accessible inside the docker enviroment and loaded by Jupyter.\nTo achieve this, I launched a new docker container (with an interactive shell) attaching my local project folder as a volume using -v ~/Dev/deep-learning:/data (local folder ~/Dev/deep-learning syncs to /data folder in the container). I mapped ports using -p 8889:8888 (local port 8889 maps to the container’s jupyter instance running on port 8888).\n% docker run -it -p 8889:8888 -v ~/Dev/deep-learning:/data --name CONTAINER_NAME fastai-dl /bin/bash\nOnce inside the container I launched jupyter using the following command:\n% jupyter notebook --ip 0.0.0.0 --no-browser\nVoila! I could access jupyter locally at https://localhost:8889.\n\nYou can access and download a ready-to-use docker image to kickstart your fastai development on MacOS, or setup a clean environment by following this guide. Happy building!"
  },
  {
    "objectID": "posts/installing-fastai-on-macos/index.html#resources",
    "href": "posts/installing-fastai-on-macos/index.html#resources",
    "title": "Deep Learning Development: Setup FastAI on MacOS",
    "section": "Resources",
    "text": "Resources\n\nfastai Docker Image for MacOS\nCourse: Practical Deep Learning for Coders\nBook: Deep Learning for Coders with fastai and PyTorch\nfastai Docs\nDocker Docs\nJupyter Lab Docs\nPyTorch Website"
  }
]